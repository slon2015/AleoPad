{"version":3,"file":"static/js/73.61894a3a.chunk.js","mappings":"iUA6Fe,SAASA,IACtB,IAAAC,GAAuDC,EAAAA,EAAAA,MAA/CC,EAAWF,EAAXE,YAAaC,EAAsBH,EAAtBG,uBAAwBC,EAAKJ,EAALI,MAC7CC,EAA6BC,EAAAA,EAAaC,kBAAiBC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAApDK,EAAGF,EAAA,GAAEG,EAAaH,EAAA,IAEzBI,EAAAA,EAAAA,YAAU,WACJR,GACFM,EAAIN,MAAM,CACRS,QAAS,2BACTC,YAAaV,GAGnB,GAAG,CAACA,IAEJ,IAlCqBW,EAdrBC,EAgDAC,GAA4BC,EAAAA,EAAAA,UAlCoC,CAChEC,MAAO,CACLC,KAAM,eACNC,OAAQ,MACRC,SAAU,IAEZC,gBANqBR,EAkC8Bb,GAAe,KA5B7B,GACrCsB,qBAAsB,IAEtBC,gBAAiBV,EAAqB,IACtCW,uBAAuB,EACvBC,OAAOC,EAAAA,EAAAA,GAAU,KACjBZ,MAAO,CACLa,cAAc,EACdC,sBAAsB,EACtBC,uBAAuB,KAmBkDC,GAAAvB,EAAAA,EAAAA,GAAAQ,EAAA,GAApEgB,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAElBG,GAAsBC,EAAAA,EAAAA,cAAY,WAClClC,GACFgC,GAASG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACNJ,GAAM,IACTV,eAAgBrB,IAGtB,GAAG,CAACA,EAAa+B,IAEjB,OACEK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACG7B,GACD8B,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,MAAM,mBAAkBH,UAC5BF,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAACC,SAAU,CAAEC,KAAM,GAAIN,SAAA,EAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,aAAYR,UAC3BC,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJC,MAAOjB,EAAOd,MAAMC,KACpB+B,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQnC,MAAMC,KAAOgC,EAAEG,OAAOL,MACvBI,CACT,GAAE,OAIRb,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,eAAcR,UAC7BC,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJC,MAAOjB,EAAOd,MAAME,OACpB8B,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQnC,MAAME,OAAS+B,EAAEG,OAAOL,MACzBI,CACT,GAAE,OAIRb,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,iBAAgBR,UAC/BC,EAAAA,EAAAA,KAACe,EAAAA,EAAG,CAAAhB,UACFC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KA/DA,EA+DiBN,UACpBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CACVC,IAAK,EACLT,MAAOjB,EAAOd,MAAMG,SACpB6B,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQnC,MAAMG,SAAW8B,GAAK,EACvBE,CACT,GAAE,WAMZhB,EAAAA,EAAAA,MAACM,EAAAA,EAAKG,KAAI,CAACC,MAAM,oBAAmBR,SAAA,EAClCF,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAACI,MAAM,SAAQpB,SAAA,EACjBC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KAnFA,EAmFiBN,UACpBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CACVR,MAAOjB,EAAOV,eACdoC,IAAK,EACLR,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQ/B,eAAiB6B,GAAK,EACvBE,CACT,GAAE,OAIRb,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KAAM,GAAIe,OAAQ,EAAErB,SACtBtC,GAAeC,IACdsC,EAAAA,EAAAA,KAACqB,EAAAA,EAAW,CACVC,mBAAoB7D,EACpB8D,kBAAmB/B,EAAOV,eAC1BpB,uBAAwBA,EACxB8D,qBAAmB,UAK3BxB,EAAAA,EAAAA,KAACe,EAAAA,EAAG,CAACU,MAAO,CAAEC,UAAW,QAAS3B,UAChCC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KA/GA,EA+GiBN,UACpBC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CAACC,KAAK,OAAOC,QAASnC,EAAoBK,SAAC,0BAMxDC,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,2BAA0BR,UACzCF,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAACI,MAAM,SAAQpB,SAAA,EACjBC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KAxHA,EAwHiBN,UACpBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CACVR,MAAOjB,EAAOT,qBACdmC,IAAK,EACLR,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQ9B,qBAAuB4B,GAAK,EAC7BE,CACT,GAAE,OAIRb,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACI,OAAQ,EAAGf,KAAM,GAAGN,SACtBrC,IACCsC,EAAAA,EAAAA,KAACqB,EAAAA,EAAW,CACVC,mBAAoB9B,EAAOV,eAC3ByC,kBACE/B,EAAOV,eAAiBU,EAAOT,qBAEjCrB,uBAAwBA,EACxB8D,qBAAmB,YAM7BxB,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,qBAAoBR,UACnCF,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAAAhB,SAAA,EACFC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KAxJA,EAwJiBN,UACpBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CACVR,MAAOjB,EAAOR,gBACdkC,IAAK,EACLR,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQ7B,gBAAkB2B,GAAK,EACxBE,CACT,GAAE,OAIRb,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACI,OAAQ,EAAGf,KAAM,GAAGN,SACtBtC,GAAeC,IACdsC,EAAAA,EAAAA,KAACqB,EAAAA,EAAW,CACVC,mBAAoB7D,EACpB8D,kBAAmB/B,EAAOR,gBAC1BtB,uBAAwBA,EACxB8D,qBAAmB,YAM7BxB,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,4BAA2BR,UAC1CF,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAAAhB,SAAA,EACFC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KAtLA,EAsLiBN,UACpBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CACVR,MAAOjB,EAAOP,uBAAyB,EACvCiC,IAAK,EACLR,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQ5B,sBAAwB0B,GAAK,EAC9BE,CACT,GAAE,OAIRb,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACI,OAAQ,EAAGf,KAAM,GAAGN,SACtBrC,GACC8B,EAAOP,uBAC0B,IAAjCO,EAAOP,wBACLe,EAAAA,EAAAA,KAACqB,EAAAA,EAAW,CACVC,mBAAoB9B,EAAOR,gBAC3BuC,kBACE/B,EAAOR,gBAAkBQ,EAAOP,sBAElCvB,uBAAwBA,EACxB8D,qBAAmB,YAM/BxB,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,qBAAoBR,UACnCF,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAACI,MAAM,SAAQpB,SAAA,EACjBC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KAxNA,EAwNiBN,UACpBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CACVR,MAAOjB,EAAON,MAAM4C,WACpBZ,IAAK,EACLR,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQ3B,OAAQC,EAAAA,EAAAA,GAAUwB,GAAK,GACxBE,CACT,GAAE,OAIRb,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACX,KAAM,GAAIe,OAAQ,EAAErB,UACvBC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAK,CACJC,YAAY,OACZC,cAAe,EACfC,WAAY1C,EAAOd,MAAME,OACzBuD,aAAc3C,EAAOd,MAAMG,SAC3BuD,UAAW,CAAE3B,MAAOjB,EAAON,iBAKnCc,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,cAAaR,UAC5BC,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CACP5B,MAAOjB,EAAOjB,MAAMa,aACpBsB,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IAAMC,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAIL,OADAC,EAAQtC,MAAMa,aAAeuB,EAAEG,OAAOwB,QAC/BzB,CACT,GAAE,OAIRb,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAACC,MAAM,UAASR,UACxBF,EAAAA,EAAAA,MAAC0C,EAAAA,EAAM,CACL9B,OArSZlC,EAqSgCiB,EAAOjB,MAhSnCA,EAAMe,uBAAyBf,EAAMc,qBAChC,QACEd,EAAMe,sBACR,UAEA,UA4RGoB,SAAU,SAACC,GAAC,OACVlB,GAAU,SAACmB,GACT,IA7ThB4B,EA6TsB3B,GAAOjB,EAAAA,EAAAA,GAAA,GACRgB,GAGC6B,EA/TN,WAFhBD,EAiUkD7B,GA9TzC,CACLrB,uBAAuB,EACvBD,sBAAsB,GAEH,YAAZmD,EACF,CACLlD,uBAAuB,EACvBD,sBAAsB,GAGjB,CACLC,uBAAuB,EACvBD,sBAAsB,GAwTV,OAJAwB,EAAQtC,MAAMe,sBACZmD,EAAanD,sBACfuB,EAAQtC,MAAMc,qBACZoD,EAAapD,qBACRwB,CACT,GAAE,EACHd,SAAA,EAEDC,EAAAA,EAAAA,KAACuC,EAAAA,EAAOG,OAAM,CAACjC,MAAM,QAAOV,SAAC,WAC7BC,EAAAA,EAAAA,KAACuC,EAAAA,EAAOG,OAAM,CAACjC,MAAM,UAASV,SAAC,aAC/BC,EAAAA,EAAAA,KAACuC,EAAAA,EAAOG,OAAM,CAACjC,MAAM,SAAQV,SAAC,iBAGlCC,EAAAA,EAAAA,KAACG,EAAAA,EAAKG,KAAI,CAAAP,UACRC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CAACC,KAAK,UAAS7B,SAAC,mBAMnC,CC1XA,IAQA,EARmB,WACjB,OACEC,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,KAAC1C,EAAY,KAGnB,C,qJCPA,GAAgB,OAAS,wB,SCyBV,SAAS+D,EAAWsB,GAKb,IAJpBrB,EAAkBqB,EAAlBrB,mBACAC,EAAiBoB,EAAjBpB,kBACA7D,EAAsBiF,EAAtBjF,uBACA8D,EAAmBmB,EAAnBnB,oBAIMoB,EAAWrB,EAAoBD,EAC/BuB,EAAWD,GAAY,EAEvBE,EALsBC,QAAQrF,IAMXA,GAAuC,IAAbkF,EAC7C,KA1BR,SACEA,EACAlF,EACAmF,GAEA,IAAMG,EAAUH,EAAW,OAAS,GACpC,OACEI,IAAAA,SACYC,KAAKC,IAAIP,GAAYlF,EAAwB,WACtD0F,WAAaJ,CAEpB,CAeeK,CAAWT,EAAUlF,EAAwBmF,GACpD,GAEAS,EAAe9B,EACjB,GAAE,GAAA+B,OACCL,KAAKC,IAAIP,GAAS,YACzB,OACE5C,EAAAA,EAAAA,KAACwD,EAAAA,EAAK,CAAAzD,UACJF,EAAAA,EAAAA,MAAC4D,EAAAA,EAAWC,KAAI,CAACC,UAAWC,KAAEC,EAAAA,EAAAA,GAAC,CAAC,EAAEC,EAAOC,OAASlB,IAAY9C,SAAA,CAC3DuD,EACAR,MAIT,C,kCCnDO,SAASkB,EACd9E,EACA+E,EACAC,GAEA,OAAID,GAAiBC,GACZ/E,EAAAA,EAAAA,GAAUD,GAAOiF,WACtBhF,EAAAA,EAAAA,GAAU,IAAIiF,IAAIlB,KAAKC,IAAIc,EAAgBC,MAIxC/E,EAAAA,EAAAA,GAAUD,EACnB,CCZA,IAAMmF,EAAa,CACjB,CAAE5D,MAAO,IAAW7B,OAAQ,KAC5B,CAAE6B,MAAO,IAAM7B,OAAQ,MAGlB,SAAS0F,EACd7D,EACA8D,GAEA,IAAK,IAAIC,EAAQ,EAAGA,EAAQH,EAAWI,OAAQD,IAAS,CACtD,IAAME,EAAYL,EAAWG,GAC7B,IAAIrF,EAAAA,EAAAA,GAAUsB,GAAOkE,uBAAuBD,EAAUjE,OACpD,YAAqBmE,GAAjBL,GAEApF,EAAAA,EAAAA,GAAUsB,GAAOoE,IAAIH,EAAUjE,OAAOqE,UAAYJ,EAAU9F,QAI5DO,EAAAA,EAAAA,GAAUsB,GAAOoE,IAAIH,EAAUjE,OAAOqE,QAAQP,GAC9CG,EAAU9F,MAIlB,CAEA,YAAqBgG,GAAjBL,GACKpF,EAAAA,EAAAA,GAAUsB,GAAOqE,WAEjB3F,EAAAA,EAAAA,GAAUsB,GAAOqE,QAAQP,EAEpC,CCXA,IAAMQ,EAAkB,KAET,SAAShD,EAAKY,GAMd,IALbP,EAASO,EAATP,UACAF,EAAUS,EAAVT,WACAC,EAAYQ,EAAZR,aACAH,EAAWW,EAAXX,YACAC,EAAaU,EAAbV,cAEM/C,GAAQ8F,EAAAA,EAAAA,UAAQ,WACpB,OACShB,EADL,UAAW5B,EACQA,EAAU3B,OFXnCwE,EEcc7C,EAAU6C,UFbxBC,EEamC9C,EAAU8C,aFXtC/F,EAAAA,EAAAA,GAAU8F,GAAWJ,IAAIK,IEQUjD,EAAeE,GFZpD,IACL8C,EACAC,CEkBA,GAAG,CAAC9C,EAAWH,EAAeE,IAE9BgD,GAAkCH,EAAAA,EAAAA,UAAQ,WACxC,OAAI9F,EAAMkG,oBAAoBL,GF3B3B,SAAqB7F,GAC1B,MAAO,EAACC,EAAAA,EAAAA,GAAU,GAAGgF,UAAUjF,IAAQC,EAAAA,EAAAA,GAAU,GACnD,CE0BakG,CAAYnG,GAEZ,EAACC,EAAAA,EAAAA,GAAU,IAAIA,EAAAA,EAAAA,GAAUD,GAEpC,GAAG,CAACA,IAAOoG,GAAAtH,EAAAA,EAAAA,GAAAmH,EAAA,GANJI,EAAWD,EAAA,GAAEE,EAAUF,EAAA,GAQ9B,OACEzF,EAAAA,EAAAA,MAAC4D,EAAAA,EAAWC,KAAI,CAAA3D,SAAA,CACbuE,EAAaiB,EAAa,GAAG,IAAEvD,EAAYyD,cAAc,KAAG,IAC5DnB,EAAakB,GAAY,IAAEtD,EAAWuD,gBAG7C,C","sources":["widgets/launch-editor/index.tsx","pages/manage/index.tsx","webpack://aleopad-ui/./src/shared/ui/block-timing/styles.module.scss?9c4f","shared/ui/block-timing/index.tsx","shared/ui/ratio/math.ts","shared/ui/ratio/format.ts","shared/ui/ratio/index.tsx"],"sourcesContent":["import {\n  Button,\n  Card,\n  Checkbox,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Select,\n  notification,\n} from \"antd\";\nimport BigNumber from \"bignumber.js\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport { BlockTiming, Ratio } from \"shared/ui\";\nimport { useMeanBlockTime } from \"shared/web3\";\n\ninterface NewLaunch {\n  token: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  sellBlockStart: number;\n  sellDurationInBlocks: number;\n  claimBlockStart: number;\n  claimDurationInBlocks: false | number;\n  ratio: BigNumber;\n  flags: {\n    isCapEnabled: boolean;\n    isPublicSellsEnabled: boolean;\n    isPrivateSellsEnabled: boolean;\n  };\n}\n\nfunction valueToFlags(\n  privacy: \"mixed\" | \"public\" | \"private\"\n): Pick<NewLaunch[\"flags\"], \"isPrivateSellsEnabled\" | \"isPublicSellsEnabled\"> {\n  if (privacy === \"mixed\") {\n    return {\n      isPrivateSellsEnabled: true,\n      isPublicSellsEnabled: true,\n    };\n  } else if (privacy === \"private\") {\n    return {\n      isPrivateSellsEnabled: true,\n      isPublicSellsEnabled: false,\n    };\n  } else {\n    return {\n      isPrivateSellsEnabled: false,\n      isPublicSellsEnabled: true,\n    };\n  }\n}\n\nfunction flagsToValue(\n  flags: Pick<\n    NewLaunch[\"flags\"],\n    \"isPrivateSellsEnabled\" | \"isPublicSellsEnabled\"\n  >\n): \"mixed\" | \"public\" | \"private\" {\n  if (flags.isPrivateSellsEnabled && flags.isPublicSellsEnabled) {\n    return \"mixed\";\n  } else if (flags.isPrivateSellsEnabled) {\n    return \"private\";\n  } else {\n    return \"public\";\n  }\n}\n\nconst defaultLaunch = (currentBlockNumber: number): NewLaunch => ({\n  token: {\n    name: \"My new token\",\n    symbol: \"TKN\",\n    decimals: 18,\n  },\n  sellBlockStart: currentBlockNumber + 20,\n  sellDurationInBlocks: 200,\n\n  claimBlockStart: currentBlockNumber + 300,\n  claimDurationInBlocks: false,\n  ratio: BigNumber(1000000),\n  flags: {\n    isCapEnabled: false,\n    isPublicSellsEnabled: true,\n    isPrivateSellsEnabled: true,\n  },\n});\n\nconst INPUT_SPAN = 6;\n\nexport default function LaunchEditor() {\n  const { blockHeight, meanBlockTimeInSeconds, error } = useMeanBlockTime();\n  const [api, contextHolder] = notification.useNotification();\n\n  useEffect(() => {\n    if (error) {\n      api.error({\n        message: \"Block height fetch error\",\n        description: error,\n      });\n    }\n  }, [error]);\n\n  const [launch, setLaunch] = useState(defaultLaunch(blockHeight || 1000000));\n\n  const onCurrentBlockClick = useCallback(() => {\n    if (blockHeight) {\n      setLaunch({\n        ...launch,\n        sellBlockStart: blockHeight,\n      });\n    }\n  }, [blockHeight, launch]);\n\n  return (\n    <>\n      {contextHolder}\n      <Card title=\"Launchpad editor\">\n        <Form labelCol={{ span: 7 }}>\n          <Form.Item label=\"Token name\">\n            <Input\n              value={launch.token.name}\n              onChange={(e) =>\n                setLaunch((l) => {\n                  const updated = {\n                    ...l,\n                  };\n\n                  updated.token.name = e.target.value;\n                  return updated;\n                })\n              }\n            />\n          </Form.Item>\n          <Form.Item label=\"Token symbol\">\n            <Input\n              value={launch.token.symbol}\n              onChange={(e) =>\n                setLaunch((l) => {\n                  const updated = {\n                    ...l,\n                  };\n\n                  updated.token.symbol = e.target.value;\n                  return updated;\n                })\n              }\n            />\n          </Form.Item>\n          <Form.Item label=\"Token decimals\">\n            <Row>\n              <Col span={INPUT_SPAN}>\n                <InputNumber\n                  min={0}\n                  value={launch.token.decimals}\n                  onChange={(e) =>\n                    setLaunch((l) => {\n                      const updated = {\n                        ...l,\n                      };\n\n                      updated.token.decimals = e || 0;\n                      return updated;\n                    })\n                  }\n                />\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item label=\"Sales start block\">\n            <Row align=\"middle\">\n              <Col span={INPUT_SPAN}>\n                <InputNumber\n                  value={launch.sellBlockStart}\n                  min={0}\n                  onChange={(e) =>\n                    setLaunch((l) => {\n                      const updated = {\n                        ...l,\n                      };\n\n                      updated.sellBlockStart = e || 0;\n                      return updated;\n                    })\n                  }\n                />\n              </Col>\n              <Col span={12} offset={4}>\n                {blockHeight && meanBlockTimeInSeconds && (\n                  <BlockTiming\n                    currentBlockHeight={blockHeight}\n                    targetBlockHeight={launch.sellBlockStart}\n                    meanBlockTimeInSeconds={meanBlockTimeInSeconds}\n                    dontShowBlocksCount\n                  />\n                )}\n              </Col>\n            </Row>\n            <Row style={{ marginTop: \"10px\" }}>\n              <Col span={INPUT_SPAN}>\n                <Button type=\"text\" onClick={onCurrentBlockClick}>\n                  Current block\n                </Button>\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item label=\"Sales duration in blocks\">\n            <Row align=\"middle\">\n              <Col span={INPUT_SPAN}>\n                <InputNumber\n                  value={launch.sellDurationInBlocks}\n                  min={1}\n                  onChange={(e) =>\n                    setLaunch((l) => {\n                      const updated = {\n                        ...l,\n                      };\n\n                      updated.sellDurationInBlocks = e || 0;\n                      return updated;\n                    })\n                  }\n                />\n              </Col>\n              <Col offset={4} span={12}>\n                {meanBlockTimeInSeconds && (\n                  <BlockTiming\n                    currentBlockHeight={launch.sellBlockStart}\n                    targetBlockHeight={\n                      launch.sellBlockStart + launch.sellDurationInBlocks\n                    }\n                    meanBlockTimeInSeconds={meanBlockTimeInSeconds}\n                    dontShowBlocksCount\n                  />\n                )}\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item label=\"Claims start block\">\n            <Row>\n              <Col span={INPUT_SPAN}>\n                <InputNumber\n                  value={launch.claimBlockStart}\n                  min={0}\n                  onChange={(e) =>\n                    setLaunch((l) => {\n                      const updated = {\n                        ...l,\n                      };\n\n                      updated.claimBlockStart = e || 0;\n                      return updated;\n                    })\n                  }\n                />\n              </Col>\n              <Col offset={4} span={12}>\n                {blockHeight && meanBlockTimeInSeconds && (\n                  <BlockTiming\n                    currentBlockHeight={blockHeight}\n                    targetBlockHeight={launch.claimBlockStart}\n                    meanBlockTimeInSeconds={meanBlockTimeInSeconds}\n                    dontShowBlocksCount\n                  />\n                )}\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item label=\"Claims duration in blocks\">\n            <Row>\n              <Col span={INPUT_SPAN}>\n                <InputNumber\n                  value={launch.claimDurationInBlocks || 0}\n                  min={0}\n                  onChange={(e) =>\n                    setLaunch((l) => {\n                      const updated = {\n                        ...l,\n                      };\n\n                      updated.claimDurationInBlocks = e || 0;\n                      return updated;\n                    })\n                  }\n                />\n              </Col>\n              <Col offset={4} span={12}>\n                {meanBlockTimeInSeconds &&\n                  launch.claimDurationInBlocks &&\n                  launch.claimDurationInBlocks !== 0 && (\n                    <BlockTiming\n                      currentBlockHeight={launch.claimBlockStart}\n                      targetBlockHeight={\n                        launch.claimBlockStart + launch.claimDurationInBlocks\n                      }\n                      meanBlockTimeInSeconds={meanBlockTimeInSeconds}\n                      dontShowBlocksCount\n                    />\n                  )}\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item label=\"Aleo credits ratio\">\n            <Row align=\"middle\">\n              <Col span={INPUT_SPAN}>\n                <InputNumber\n                  value={launch.ratio.toNumber()}\n                  min={0}\n                  onChange={(e) =>\n                    setLaunch((l) => {\n                      const updated = {\n                        ...l,\n                      };\n\n                      updated.ratio = BigNumber(e || 1);\n                      return updated;\n                    })\n                  }\n                />\n              </Col>\n              <Col span={12} offset={4}>\n                <Ratio\n                  rightSymbol=\"ALEO\"\n                  rightDecimals={6}\n                  leftSymbol={launch.token.symbol}\n                  leftDecimals={launch.token.decimals}\n                  ratioData={{ value: launch.ratio }}\n                />\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item label=\"Cap enabled\">\n            <Checkbox\n              value={launch.flags.isCapEnabled}\n              onChange={(e) =>\n                setLaunch((l) => {\n                  const updated = {\n                    ...l,\n                  };\n\n                  updated.flags.isCapEnabled = e.target.checked;\n                  return updated;\n                })\n              }\n            />\n          </Form.Item>\n          <Form.Item label=\"Privacy\">\n            <Select\n              value={flagsToValue(launch.flags)}\n              onChange={(e) =>\n                setLaunch((l) => {\n                  const updated = {\n                    ...l,\n                  };\n\n                  const updatedFlags = valueToFlags(e);\n\n                  updated.flags.isPrivateSellsEnabled =\n                    updatedFlags.isPrivateSellsEnabled;\n                  updated.flags.isPublicSellsEnabled =\n                    updatedFlags.isPublicSellsEnabled;\n                  return updated;\n                })\n              }\n            >\n              <Select.Option value=\"mixed\">Mixed</Select.Option>\n              <Select.Option value=\"private\">Private</Select.Option>\n              <Select.Option value=\"public\">Public</Select.Option>\n            </Select>\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\">Setup</Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </>\n  );\n}\n","import LaunchEditor from \"widgets/launch-editor\";\n\nconst ManagePage = () => {\n  return (\n    <>\n      <LaunchEditor />\n    </>\n  );\n};\n\nexport default ManagePage;\n","// extracted by mini-css-extract-plugin\nexport default {\"passed\":\"styles_passed__pVj6j\"};","import { Space, Typography } from \"antd\";\nimport cn from \"classnames\";\nimport moment from \"moment\";\n\nimport styles from \"./styles.module.scss\";\n\ninterface BlockTimingProps {\n  dontShowBlocksCount?: boolean;\n  currentBlockHeight: number;\n  targetBlockHeight: number;\n  meanBlockTimeInSeconds?: number;\n}\n\nfunction timingText(\n  blockGap: number,\n  meanBlockTimeInSeconds: number,\n  isPassed: boolean\n) {\n  const postfix = isPassed ? \" ago\" : \"\";\n  return (\n    moment\n      .duration(Math.abs(blockGap) * meanBlockTimeInSeconds, \"seconds\")\n      .humanize() + postfix\n  );\n}\n\nexport default function BlockTiming({\n  currentBlockHeight,\n  targetBlockHeight,\n  meanBlockTimeInSeconds,\n  dontShowBlocksCount,\n}: BlockTimingProps) {\n  const showTimingInSeconds = Boolean(meanBlockTimeInSeconds);\n\n  const blockGap = targetBlockHeight - currentBlockHeight;\n  const isPassed = blockGap <= 0;\n\n  const timing =\n    showTimingInSeconds && meanBlockTimeInSeconds && blockGap !== 0\n      ? \"~ \" + timingText(blockGap, meanBlockTimeInSeconds, isPassed)\n      : \"\";\n\n  const blockGapText = dontShowBlocksCount\n    ? \"\"\n    : `${Math.abs(blockGap)} Blocks `;\n  return (\n    <Space>\n      <Typography.Text className={cn({ [styles.passed]: isPassed })}>\n        {blockGapText}\n        {timing}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import BigNumber from \"bignumber.js\";\n\nexport function applyDecimals(\n  ratio: BigNumber.Value,\n  decimalsRight: number,\n  decimalsLeft: number\n): BigNumber {\n  if (decimalsRight != decimalsLeft) {\n    return BigNumber(ratio).dividedBy(\n      BigNumber(10).pow(Math.abs(decimalsRight - decimalsLeft))\n    );\n  }\n\n  return BigNumber(ratio);\n}\n\nexport function invertRatio(ratio: BigNumber.Value): [BigNumber, BigNumber] {\n  return [BigNumber(1).dividedBy(ratio), BigNumber(1)];\n}\n\nexport function toRatio(\n  numerator: BigNumber.Value,\n  denominator: BigNumber.Value\n): BigNumber {\n  return BigNumber(numerator).div(denominator);\n}\n","import BigNumber from \"bignumber.js\";\n\nconst milestones = [\n  { value: 1_000_000, symbol: \"M\" },\n  { value: 1000, symbol: \"K\" },\n];\n\nexport function formatNumber(\n  value: BigNumber.Value,\n  decimalPlaces?: number\n): string {\n  for (let index = 0; index < milestones.length; index++) {\n    const milestone = milestones[index];\n    if (BigNumber(value).isGreaterThanOrEqualTo(milestone.value)) {\n      if (decimalPlaces == undefined) {\n        return (\n          BigNumber(value).div(milestone.value).toFixed() + milestone.symbol\n        );\n      } else {\n        return (\n          BigNumber(value).div(milestone.value).toFixed(decimalPlaces) +\n          milestone.symbol\n        );\n      }\n    }\n  }\n\n  if (decimalPlaces == undefined) {\n    return BigNumber(value).toFixed();\n  } else {\n    return BigNumber(value).toFixed(decimalPlaces);\n  }\n}\n","import BigNumber from \"bignumber.js\";\nimport { useMemo } from \"react\";\nimport { applyDecimals, invertRatio, toRatio } from \"./math\";\nimport { Typography } from \"antd\";\nimport { formatNumber } from \"./format\";\n\ninterface RaioProps {\n  rightSymbol: string;\n  rightDecimals: number;\n  leftSymbol: string;\n  leftDecimals: number;\n  ratioData:\n    | {\n        value: BigNumber.Value;\n      }\n    | {\n        numerator: BigNumber.Value;\n        denominator: BigNumber.Value;\n      };\n}\n\nconst LOWER_THRESHOLD = 0.0001;\n\nexport default function Ratio({\n  ratioData,\n  leftSymbol,\n  leftDecimals,\n  rightSymbol,\n  rightDecimals,\n}: RaioProps) {\n  const ratio = useMemo(() => {\n    if (\"value\" in ratioData) {\n      return applyDecimals(ratioData.value, rightDecimals, leftDecimals);\n    } else {\n      return applyDecimals(\n        toRatio(ratioData.numerator, ratioData.denominator),\n        rightDecimals,\n        leftDecimals\n      );\n    }\n  }, [ratioData, rightDecimals, leftDecimals]);\n\n  const [rightAmount, leftAmount] = useMemo(() => {\n    if (ratio.isLessThanOrEqualTo(LOWER_THRESHOLD)) {\n      return invertRatio(ratio);\n    } else {\n      return [BigNumber(1), BigNumber(ratio)];\n    }\n  }, [ratio]);\n\n  return (\n    <Typography.Text>\n      {formatNumber(rightAmount, 0)} {rightSymbol.toUpperCase()} ={\" \"}\n      {formatNumber(leftAmount)} {leftSymbol.toUpperCase()}\n    </Typography.Text>\n  );\n}\n"],"names":["LaunchEditor","_useMeanBlockTime","useMeanBlockTime","blockHeight","meanBlockTimeInSeconds","error","_notification$useNoti","notification","useNotification","_notification$useNoti2","_slicedToArray","api","contextHolder","useEffect","message","description","currentBlockNumber","flags","_useState","useState","token","name","symbol","decimals","sellBlockStart","sellDurationInBlocks","claimBlockStart","claimDurationInBlocks","ratio","BigNumber","isCapEnabled","isPublicSellsEnabled","isPrivateSellsEnabled","_useState2","launch","setLaunch","onCurrentBlockClick","useCallback","_objectSpread","_jsxs","_Fragment","children","_jsx","Card","title","Form","labelCol","span","Item","label","Input","value","onChange","e","l","updated","target","Row","Col","InputNumber","min","align","offset","BlockTiming","currentBlockHeight","targetBlockHeight","dontShowBlocksCount","style","marginTop","Button","type","onClick","toNumber","Ratio","rightSymbol","rightDecimals","leftSymbol","leftDecimals","ratioData","Checkbox","checked","Select","privacy","updatedFlags","Option","_ref","blockGap","isPassed","timing","Boolean","postfix","moment","Math","abs","humanize","timingText","blockGapText","concat","Space","Typography","Text","className","cn","_defineProperty","styles","passed","applyDecimals","decimalsRight","decimalsLeft","dividedBy","pow","milestones","formatNumber","decimalPlaces","index","length","milestone","isGreaterThanOrEqualTo","undefined","div","toFixed","LOWER_THRESHOLD","useMemo","numerator","denominator","_useMemo","isLessThanOrEqualTo","invertRatio","_useMemo2","rightAmount","leftAmount","toUpperCase"],"sourceRoot":""}
{"version":3,"file":"static/js/483.996d83fb.chunk.js","mappings":"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","sources":["webpack://aleopad-ui/./src/entities/ticket/ui/ticket-row/styles.module.scss?38b7","entities/ticket/ui/ticket-row/index.tsx","features/claim-form/claim-mode.tsx","features/claim-form/claim-selected-ticket.tsx","widgets/claim-modal/index.tsx","pages/tickets-list/index.tsx","webpack://aleopad-ui/./src/shared/ui/block-timing/styles.module.scss?9c4f","shared/ui/block-timing/index.tsx","shared/ui/amounts/math.ts","shared/ui/amounts/format.ts","shared/ui/amounts/ratio.tsx","shared/ui/amounts/amount.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"row\":\"styles_row__LYdbW\"};","import React, { useCallback } from \"react\";\nimport { Button, Col, Row, Typography } from \"antd\";\n\nimport styles from \"./styles.module.scss\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Field,\n  TicketItem,\n  fieldToText,\n  normalizeField,\n  useTokenForLaunch,\n} from \"shared/web3\";\nimport { Ticket } from \"entities/ticket\";\nimport { Amount } from \"shared/ui\";\n\ntype TicketRowProps = TicketItem & { currentBlockHeight: number } & {\n  onClaimClick(tokenId: string): void;\n};\n\nfunction mapFromProps(\n  props: TicketRowProps\n): Omit<Ticket, \"tokenName\" | \"tokenSymbol\" | \"tokenDecimals\"> {\n  return {\n    launchId: normalizeField(props.launch.id),\n    amount: props.amount,\n    isClaimable:\n      props.launch.claimStartBlock <= props.currentBlockHeight &&\n      (props.launch.claimBlockDuration === 0 ||\n        props.launch.claimStartBlock + props.launch.claimBlockDuration >\n          props.currentBlockHeight),\n  };\n}\n\nfunction mapToken(\n  input: ReturnType<typeof useTokenForLaunch>,\n  launchId: string\n): Pick<Ticket, \"tokenName\" | \"tokenDecimals\" | \"tokenSymbol\"> & {\n  id?: Field;\n} {\n  if (input.isSuccess && input.data) {\n    return {\n      tokenDecimals: input.data.decimals,\n      tokenName: fieldToText(input.data.name),\n      tokenSymbol: fieldToText(input.data.symbol),\n      id: input.data.id,\n    };\n  }\n\n  return {\n    tokenName: `Coin-${launchId}`,\n    tokenDecimals: 6,\n    tokenSymbol: \"TKN\",\n  };\n}\n\nexport const TicketRow = (props: TicketRowProps) => {\n  const { launchId, amount, isClaimable } = mapFromProps(props);\n\n  const token = useTokenForLaunch(launchId);\n\n  const {\n    id: tokenId,\n    tokenName,\n    tokenSymbol,\n    tokenDecimals,\n  } = mapToken(token, launchId);\n\n  const { onClaimClick } = props;\n\n  const onClaimClickHandler = useCallback(() => {\n    if (isClaimable && tokenId) {\n      onClaimClick(normalizeField(tokenId));\n    }\n  }, [tokenId, isClaimable, onClaimClick]);\n\n  const claimed = amount === 0;\n\n  return (\n    <Row className={styles.row} align=\"middle\">\n      <Col span={10}>\n        <Typography.Text>{tokenName}</Typography.Text>\n      </Col>\n      <Col span={6}>\n        <Amount amount={amount} decimals={tokenDecimals} symbol={tokenSymbol} />\n      </Col>\n      <Col span={3}>\n        <Link to={`/launches/${launchId}`}>Launch</Link>\n      </Col>\n      <Col span={5}>\n        {isClaimable && !claimed && (\n          <Button type=\"primary\" onClick={onClaimClickHandler}>\n            Claim\n          </Button>\n        )}\n      </Col>\n    </Row>\n  );\n};\n","import React from \"react\";\nimport { Button, Row, Space } from \"antd\";\n\ntype ModeOptions = \"public\" | \"private\";\n\ninterface BuyModeProps {\n  currentMode: ModeOptions;\n  selectMode(mode: ModeOptions): void;\n}\n\nexport default function ClaimMode({ selectMode, currentMode }: BuyModeProps) {\n  function onSelectMode(mode: ModeOptions) {\n    selectMode(mode);\n  }\n\n  return (\n    <Row justify=\"center\">\n      <Space.Compact>\n        <Button\n          type={currentMode === \"public\" ? \"primary\" : \"default\"}\n          onClick={() => onSelectMode(\"public\")}\n        >\n          Public\n        </Button>\n        <Button\n          type={currentMode === \"private\" ? \"primary\" : \"default\"}\n          onClick={() => onSelectMode(\"private\")}\n        >\n          Private\n        </Button>\n      </Space.Compact>\n    </Row>\n  );\n}\n","import {\n  TicketRecord,\n  fieldToText,\n  useClaimTicketForTicketsList,\n  useToken,\n} from \"shared/web3\";\n\nimport { Button, Form, Row, Skeleton, Space, Typography } from \"antd\";\nimport ClaimMode from \"./claim-mode\";\nimport { Amount } from \"shared/ui\";\n\ninterface ClaimFormProps {\n  ticket: TicketRecord;\n  tokenId: string;\n}\n\nexport function ClaimSelectedTicketForm({ ticket, tokenId }: ClaimFormProps) {\n  const claim = useClaimTicketForTicketsList(tokenId, ticket);\n  const token = useToken(tokenId);\n\n  if (claim.loading || !claim.enabled || !token.data) {\n    return (\n      <>\n        <Skeleton />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Space direction=\"vertical\">\n        <Form title=\"Claim token\" layout=\"vertical\">\n          <Form.Item>\n            <ClaimMode\n              currentMode={claim.privacy}\n              selectMode={(m) => claim.setPrivacy(m)}\n            />\n          </Form.Item>\n          <Form.Item>\n            <Typography.Text>\n              You will receive{\" \"}\n              <Amount\n                amount={ticket.amount}\n                decimals={token.data!.decimals}\n                symbol={fieldToText(token.data!.symbol)}\n              />\n            </Typography.Text>\n          </Form.Item>\n          <Form.Item>\n            <Row justify=\"center\">\n              <Button\n                type=\"primary\"\n                disabled={\n                  !claim.enabled && !claim.blocker && !claim.mutation.isLoading\n                }\n                onClick={() => claim.mutation.mutate()}\n              >\n                Claim\n              </Button>\n            </Row>\n            {claim.blocker && (\n              <Row>\n                <Typography.Text type=\"danger\">{claim.blocker}</Typography.Text>\n              </Row>\n            )}\n          </Form.Item>\n        </Form>\n      </Space>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Modal, Row } from \"antd\";\nimport { TicketRecord } from \"shared/web3\";\nimport { ClaimSelectedTicketForm } from \"features/claim-form\";\n\ninterface ClaimModalProps {\n  ticket: TicketRecord;\n  tokenId: string;\n  onModalClose(): void;\n}\n\nexport function ClaimModal({ ticket, tokenId, onModalClose }: ClaimModalProps) {\n  const isModalOpen = Boolean(ticket);\n\n  return (\n    <Modal\n      open={isModalOpen}\n      onCancel={onModalClose}\n      title=\"Claim Launch ticket\"\n      footer={null}\n    >\n      <Row justify=\"center\">\n        <ClaimSelectedTicketForm ticket={ticket} tokenId={tokenId} />\n      </Row>\n    </Modal>\n  );\n}\n","import { Card, List } from \"antd\";\nimport { TicketRow } from \"entities/ticket\";\nimport { useState } from \"react\";\nimport { TicketRecord, useBlockHeight, useTicketsList } from \"shared/web3\";\nimport { ClaimModal } from \"widgets/claim-modal\";\n\ntype Ticket = Parameters<typeof TicketRow>[0];\n\nconst TicketsListPage = () => {\n  const tickets = useTicketsList();\n  const blockHeight = useBlockHeight();\n\n  const [selectedTicket, setSelectedTicket] = useState<\n    (TicketRecord & { tokenId: string }) | undefined\n  >();\n\n  const list: Array<Ticket> =\n    !tickets.loading && typeof blockHeight.blockHeight === \"number\"\n      ? tickets.items.map((i) => ({\n          ...i,\n          currentBlockHeight: blockHeight.blockHeight!,\n          onClaimClick: (tokenId: string) => {\n            setSelectedTicket({ ...i, tokenId });\n          },\n        }))\n      : [];\n\n  return (\n    <Card title=\"Tickets\">\n      {selectedTicket && (\n        <ClaimModal\n          ticket={selectedTicket}\n          tokenId={selectedTicket.tokenId}\n          onModalClose={() => setSelectedTicket(undefined)}\n        />\n      )}\n      <List\n        bordered\n        dataSource={list}\n        renderItem={(t) => (\n          <List.Item>\n            <TicketRow {...t} />\n          </List.Item>\n        )}\n      />\n    </Card>\n  );\n};\n\nexport default TicketsListPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"passed\":\"styles_passed__pVj6j\"};","import { Space, Typography } from \"antd\";\nimport cn from \"classnames\";\nimport moment from \"moment\";\n\nimport styles from \"./styles.module.scss\";\n\ninterface BlockTimingProps {\n  dontShowBlocksCount?: boolean;\n  currentBlockHeight: number;\n  targetBlockHeight: number;\n  meanBlockTimeInSeconds?: number;\n}\n\nfunction timingText(\n  blockGap: number,\n  meanBlockTimeInSeconds: number,\n  isPassed: boolean\n) {\n  const postfix = isPassed ? \" ago\" : \"\";\n  return (\n    moment\n      .duration(Math.abs(blockGap) * meanBlockTimeInSeconds, \"seconds\")\n      .humanize() + postfix\n  );\n}\n\nexport default function BlockTiming({\n  currentBlockHeight,\n  targetBlockHeight,\n  meanBlockTimeInSeconds,\n  dontShowBlocksCount,\n}: BlockTimingProps) {\n  const showTimingInSeconds = Boolean(meanBlockTimeInSeconds);\n\n  const blockGap = targetBlockHeight - currentBlockHeight;\n  const isPassed = blockGap <= 0;\n\n  const timing =\n    showTimingInSeconds && meanBlockTimeInSeconds && blockGap !== 0\n      ? \"~ \" + timingText(blockGap, meanBlockTimeInSeconds, isPassed)\n      : \"\";\n\n  const blockGapText = dontShowBlocksCount\n    ? \"\"\n    : `${Math.abs(blockGap)} Blocks `;\n  return (\n    <Space>\n      <Typography.Text className={cn({ [styles.passed]: isPassed })}>\n        {blockGapText}\n        {timing}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import BigNumber from \"bignumber.js\";\n\nexport function applyBothDecimals(\n  ratio: BigNumber.Value,\n  decimalsRight: number,\n  decimalsLeft: number\n): BigNumber {\n  if (decimalsRight !== decimalsLeft) {\n    return BigNumber(ratio).dividedBy(\n      BigNumber(10).pow(Math.abs(decimalsRight - decimalsLeft))\n    );\n  }\n\n  return BigNumber(ratio);\n}\n\nexport function invertRatio(ratio: BigNumber.Value): [BigNumber, BigNumber] {\n  return [BigNumber(1).dividedBy(ratio), BigNumber(1)];\n}\n\nexport function toRatio(\n  numerator: BigNumber.Value,\n  denominator: BigNumber.Value\n): BigNumber {\n  return BigNumber(numerator).div(denominator);\n}\n","import BigNumber from \"bignumber.js\";\n\nconst milestones = [\n  { value: 1_000_000, symbol: \"M\" },\n  { value: 1000, symbol: \"K\" },\n];\n\nexport function formatNumber(\n  value: BigNumber.Value,\n  decimalPlaces?: number\n): string {\n  for (let index = 0; index < milestones.length; index++) {\n    const milestone = milestones[index];\n    if (BigNumber(value).isGreaterThanOrEqualTo(milestone.value)) {\n      if (!decimalPlaces && decimalPlaces !== 0) {\n        return (\n          BigNumber(value).div(milestone.value).toFixed() + milestone.symbol\n        );\n      } else {\n        return (\n          BigNumber(value).div(milestone.value).toFixed(decimalPlaces) +\n          milestone.symbol\n        );\n      }\n    }\n  }\n\n  if (!decimalPlaces && decimalPlaces !== 0) {\n    return BigNumber(value).toFixed();\n  } else {\n    return BigNumber(value).toFixed(decimalPlaces);\n  }\n}\n","import BigNumber from \"bignumber.js\";\nimport { useMemo } from \"react\";\nimport { applyBothDecimals, invertRatio, toRatio } from \"./math\";\nimport { Typography } from \"antd\";\nimport { formatNumber } from \"./format\";\n\ninterface RaioProps {\n  rightSymbol: string;\n  rightDecimals: number;\n  leftSymbol: string;\n  leftDecimals: number;\n  notInvertAmounts?: boolean;\n  creditsAmount?: BigNumber.Value;\n  creditsDecimalPlaces?: number;\n  ratioData:\n    | {\n        value: BigNumber.Value;\n      }\n    | {\n        numerator: BigNumber.Value;\n        denominator: BigNumber.Value;\n      };\n}\n\nconst LOWER_THRESHOLD = 0.0001;\n\nexport function Ratio({\n  ratioData,\n  leftSymbol,\n  leftDecimals,\n  rightSymbol,\n  rightDecimals,\n  notInvertAmounts,\n  creditsAmount = 1,\n  creditsDecimalPlaces = 0,\n}: RaioProps) {\n  const ratio = useMemo(() => {\n    if (\"value\" in ratioData) {\n      return applyBothDecimals(\n        BigNumber(1).dividedBy(ratioData.value),\n        rightDecimals,\n        leftDecimals\n      );\n    } else {\n      return applyBothDecimals(\n        toRatio(ratioData.numerator, ratioData.denominator),\n        rightDecimals,\n        leftDecimals\n      );\n    }\n  }, [ratioData, rightDecimals, leftDecimals]);\n\n  const [rightAmount, leftAmount] = useMemo(() => {\n    if (!notInvertAmounts && ratio.isLessThanOrEqualTo(LOWER_THRESHOLD)) {\n      return invertRatio(ratio);\n    } else {\n      return [BigNumber(1), BigNumber(ratio)];\n    }\n  }, [ratio, notInvertAmounts]);\n\n  return (\n    <Typography.Text>\n      {formatNumber(\n        rightAmount.multipliedBy(creditsAmount),\n        creditsDecimalPlaces\n      )}{\" \"}\n      {rightSymbol.toUpperCase()} ={\" \"}\n      {formatNumber(leftAmount.multipliedBy(creditsAmount))}{\" \"}\n      {leftSymbol.toUpperCase()}\n    </Typography.Text>\n  );\n}\n","import { Typography } from \"antd\";\nimport BigNumber from \"bignumber.js\";\nimport { U128, divideToDecimals } from \"shared/web3\";\nimport { formatNumber } from \"./format\";\nimport { useMemo } from \"react\";\n\ninterface AmountProps {\n  amount:\n    | BigNumber.Value\n    | {\n        amount: BigNumber.Value;\n        numerator: U128;\n        denominator: U128;\n      };\n  decimals: number;\n  symbol: string;\n}\n\nfunction calculateAmount(input: AmountProps[\"amount\"]): BigNumber {\n  if (typeof input === \"object\" && \"numerator\" in input) {\n    return BigNumber(input.amount)\n      .multipliedBy(input.numerator)\n      .dividedBy(input.denominator);\n  }\n  return BigNumber(input);\n}\n\nexport function Amount({ amount, decimals, symbol }: AmountProps) {\n  const calculatedAmount = useMemo(() => calculateAmount(amount), [amount]);\n  return (\n    <Typography.Text>\n      {formatNumber(divideToDecimals(calculatedAmount, decimals))} {symbol}\n    </Typography.Text>\n  );\n}\n"],"names":["TicketRow","props","_mapFromProps","launchId","normalizeField","launch","id","amount","isClaimable","claimStartBlock","currentBlockHeight","claimBlockDuration","mapFromProps","_mapToken","input","isSuccess","data","tokenDecimals","decimals","tokenName","fieldToText","name","tokenSymbol","symbol","concat","mapToken","useTokenForLaunch","tokenId","onClaimClick","onClaimClickHandler","useCallback","claimed","_jsxs","Row","className","styles","align","children","_jsx","Col","span","Typography","Text","Amount","Link","to","Button","type","onClick","ClaimMode","_ref","selectMode","currentMode","onSelectMode","mode","justify","Space","Compact","ClaimSelectedTicketForm","ticket","claim","useClaimTicketForTicketsList","token","useToken","loading","enabled","_Fragment","direction","Form","title","layout","Item","privacy","m","setPrivacy","disabled","blocker","mutation","isLoading","mutate","Skeleton","ClaimModal","onModalClose","isModalOpen","Boolean","Modal","open","onCancel","footer","tickets","useTicketsList","blockHeight","useBlockHeight","_useState","useState","_useState2","_slicedToArray","selectedTicket","setSelectedTicket","list","items","map","i","_objectSpread","Card","undefined","List","bordered","dataSource","renderItem","t","BlockTiming","targetBlockHeight","meanBlockTimeInSeconds","dontShowBlocksCount","blockGap","isPassed","timing","postfix","moment","Math","abs","humanize","timingText","blockGapText","cn","_defineProperty","passed","applyBothDecimals","ratio","decimalsRight","decimalsLeft","BigNumber","dividedBy","pow","milestones","value","formatNumber","decimalPlaces","index","length","milestone","isGreaterThanOrEqualTo","div","toFixed","LOWER_THRESHOLD","Ratio","ratioData","leftSymbol","leftDecimals","rightSymbol","rightDecimals","notInvertAmounts","_ref$creditsAmount","creditsAmount","_ref$creditsDecimalPl","creditsDecimalPlaces","useMemo","numerator","denominator","_useMemo","isLessThanOrEqualTo","invertRatio","_useMemo2","rightAmount","leftAmount","multipliedBy","toUpperCase","calculatedAmount","divideToDecimals"],"sourceRoot":""}
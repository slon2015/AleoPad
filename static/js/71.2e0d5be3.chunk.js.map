{"version":3,"file":"static/js/71.2e0d5be3.chunk.js","mappings":"6PAgBe,SAASA,EAASC,GAA+B,IAA5BC,EAAOD,EAAPC,QAClCC,GAA+BC,EAAAA,EAAAA,IAASF,GAA1BG,EAAKF,EAAXG,KAAaC,EAAKJ,EAALI,MACfC,GAAcC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,GAASL,EAAM,GAAE,CAACA,IACpDM,EAA6BC,EAAAA,EAAaC,kBAAiBC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAApDK,EAAGF,EAAA,GAAEG,EAAaH,EAAA,GAEnBI,EAAoC,CACxC,CACEC,IAAK,IACLC,MAAO,OACPC,SAAUhB,GACRiB,EAAAA,EAAAA,KAACC,EAAAA,EAAWC,KAAI,CAAAH,SAAEb,EAAaiB,QAE/BH,EAAAA,EAAAA,KAACI,EAAAA,EAASC,MAAK,KAGnB,CACER,IAAK,IACLC,MAAO,SACPC,SAAUhB,GACRiB,EAAAA,EAAAA,KAACC,EAAAA,EAAWC,KAAI,CAAAH,SAAEb,EAAaoB,OAAOC,iBAEtCP,EAAAA,EAAAA,KAACI,EAAAA,EAASC,MAAK,KAGnB,CACER,IAAK,IACLC,MAAO,WACPC,SAAUhB,GACRiB,EAAAA,EAAAA,KAACC,EAAAA,EAAWC,KAAI,CAAAH,SAAEb,EAAasB,YAE/BR,EAAAA,EAAAA,KAACI,EAAAA,EAASC,MAAK,MAcrB,OATAI,EAAAA,EAAAA,YAAU,WACJxB,GACFS,EAAIT,MAAM,CACRyB,QAAS,sBACTC,YAAaC,OAAO3B,IAG1B,GAAG,CAACA,KAGF4B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAf,SAAA,CACGJ,GACDK,EAAAA,EAAAA,KAACe,EAAAA,EAAY,CAACC,MAAM,QAAQpB,MAAOA,EAAOqB,OAAO,eAGvD,C,cCjEA,GAAgB,IAAM,oB,mBCWP,SAASC,EAAQvC,GAA4B,IAAzBI,EAAKJ,EAALI,MAC3BoC,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,cAAY,WAChCH,EAAS,WAADI,OAAYxC,EAAMyC,IAC5B,GAAG,CAACzC,EAAMyC,GAAIL,IAEd,OACEN,EAAAA,EAAAA,MAACY,EAAAA,EAAG,CAACC,UAAWC,EAAOC,IAAI7B,SAAA,EACzBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACC,KAAM,GAAG/B,UACZC,EAAAA,EAAAA,KAACC,EAAAA,EAAW8B,KAAI,CAACC,QAASX,EAActB,SAAEhB,EAAMoB,UAElDH,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACC,KAAM,EAAE/B,UACXC,EAAAA,EAAAA,KAACC,EAAAA,EAAWC,KAAI,CAAAH,SAAEhB,EAAMyB,eAIhC,C,qECzBO,SAASpB,EACdL,GAEA,GAAKA,EAIL,MAAO,CACLoB,MAAM8B,EAAAA,EAAAA,IAAYlD,EAAMoB,MACxBG,QAAQ2B,EAAAA,EAAAA,IAAYlD,EAAMuB,QAC1BkB,GAAIzC,EAAMyC,GAAGU,UACb1B,SAAUzB,EAAMyB,SAEpB,C,wECJA,UATkB,WAChB,IAAQgB,GAAOW,EAAAA,EAAAA,MAAPX,GACR,OACExB,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CAAArC,UACHC,EAAAA,EAAAA,KAACtB,EAAAA,EAAS,CAACE,QAAS4C,KAG1B,C","sources":["entities/token/ui/token-info/index.tsx","webpack://aleopad-ui/./src/entities/token/ui/token-row/style.module.scss?d3e1","entities/token/ui/token-row/index.tsx","entities/token/model/index.ts","pages/token-info/index.tsx"],"sourcesContent":["import { useEffect, useMemo } from \"react\";\nimport {\n  Descriptions,\n  DescriptionsProps,\n  notification,\n  Typography,\n  Skeleton,\n} from \"antd\";\n\nimport { useToken } from \"shared/web3\";\nimport { mapToken } from \"entities/token/model\";\n\ntype TokenCardProps = {\n  tokenId: string;\n};\n\nexport default function TokenInfo({ tokenId }: TokenCardProps) {\n  const { data: token, error } = useToken(tokenId);\n  const parsedToken = useMemo(() => mapToken(token), [token]);\n  const [api, contextHolder] = notification.useNotification();\n\n  const items: DescriptionsProps[\"items\"] = [\n    {\n      key: \"1\",\n      label: \"Name\",\n      children: token ? (\n        <Typography.Text>{parsedToken!.name}</Typography.Text>\n      ) : (\n        <Skeleton.Input />\n      ),\n    },\n    {\n      key: \"2\",\n      label: \"Symbol\",\n      children: token ? (\n        <Typography.Text>{parsedToken!.symbol.toUpperCase()}</Typography.Text>\n      ) : (\n        <Skeleton.Input />\n      ),\n    },\n    {\n      key: \"3\",\n      label: \"Decimals\",\n      children: token ? (\n        <Typography.Text>{parsedToken!.decimals}</Typography.Text>\n      ) : (\n        <Skeleton.Input />\n      ),\n    },\n  ];\n\n  useEffect(() => {\n    if (error) {\n      api.error({\n        message: \"Token loading error\",\n        description: String(error),\n      });\n    }\n  }, [error]);\n\n  return (\n    <>\n      {contextHolder}\n      <Descriptions title=\"Token\" items={items} layout=\"vertical\" />\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"style_row__sMVKO\"};","import { useNavigate } from \"react-router\";\nimport { useCallback } from \"react\";\n\nimport { Token } from \"../../model\";\n\nimport styles from \"./style.module.scss\";\nimport { Col, Row, Typography } from \"antd\";\n\ntype TokenRowProps = {\n  token: Token;\n};\n\nexport default function TokenRow({ token }: TokenRowProps) {\n  const navigate = useNavigate();\n\n  const onLaunchClick = useCallback(() => {\n    navigate(`/tokens/${token.id}`);\n  }, [token.id, navigate]);\n\n  return (\n    <Row className={styles.row}>\n      <Col span={20}>\n        <Typography.Link onClick={onLaunchClick}>{token.name}</Typography.Link>\n      </Col>\n      <Col span={4}>\n        <Typography.Text>{token.decimals}</Typography.Text>\n      </Col>\n    </Row>\n  );\n}\n","import { Token as DbToken, OnchainToken, fieldToText } from \"shared/web3\";\n\nexport type Token = DbToken;\n\nexport function mapToken(\n  token: OnchainToken | undefined | null\n): Token | undefined {\n  if (!token) {\n    return undefined;\n  }\n\n  return {\n    name: fieldToText(token.name),\n    symbol: fieldToText(token.symbol),\n    id: token.id.toFixed(),\n    decimals: token.decimals,\n  };\n}\n","import { Card } from \"antd\";\nimport { TokenInfo } from \"entities/token\";\nimport { useParams } from \"react-router\";\n\nconst TokenPage = () => {\n  const { id } = useParams();\n  return (\n    <Card>\n      <TokenInfo tokenId={id!!} />\n    </Card>\n  );\n};\n\nexport default TokenPage;\n"],"names":["TokenInfo","_ref","tokenId","_useToken","useToken","token","data","error","parsedToken","useMemo","mapToken","_notification$useNoti","notification","useNotification","_notification$useNoti2","_slicedToArray","api","contextHolder","items","key","label","children","_jsx","Typography","Text","name","Skeleton","Input","symbol","toUpperCase","decimals","useEffect","message","description","String","_jsxs","_Fragment","Descriptions","title","layout","TokenRow","navigate","useNavigate","onLaunchClick","useCallback","concat","id","Row","className","styles","row","Col","span","Link","onClick","fieldToText","toFixed","useParams","Card"],"sourceRoot":""}
{"version":3,"file":"static/js/213.609b9fe8.chunk.js","mappings":"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","sources":["entities/token/ui/token-info/index.tsx","webpack://aleopad-ui/./src/entities/token/ui/token-row/style.module.scss?d3e1","entities/token/ui/token-row/index.tsx","webpack://aleopad-ui/./src/entities/token/ui/token-balances/style.module.scss?af3d","entities/token/ui/token-balances/index.tsx","entities/token/model/index.ts","pages/tokens-list/index.tsx","webpack://aleopad-ui/./src/shared/ui/block-timing/styles.module.scss?9c4f","shared/ui/block-timing/index.tsx","shared/ui/amounts/math.ts","shared/ui/amounts/format.ts","shared/ui/amounts/ratio.tsx","shared/ui/amounts/amount.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport { Descriptions, DescriptionsProps, Typography, Skeleton } from \"antd\";\n\nimport { OnchainToken, normalizeField } from \"shared/web3\";\nimport { Token, isMappedToken, mapToken } from \"entities/token/model\";\nimport { Link } from \"react-router-dom\";\n\ntype TokenCardProps = {\n  token: OnchainToken | Token;\n  link?: boolean;\n};\n\nexport default function TokenInfo({ token, link }: TokenCardProps) {\n  const parsedToken = useMemo(\n    () => (isMappedToken(token) ? token : mapToken(token)),\n    [token]\n  );\n\n  const nameEntry = parsedToken ? (\n    link ? (\n      <Link to={`/tokens/${normalizeField(parsedToken.id)}`}>\n        {parsedToken.name}\n      </Link>\n    ) : (\n      <Typography.Text>{parsedToken!.name}</Typography.Text>\n    )\n  ) : (\n    <Skeleton.Input />\n  );\n\n  const items: DescriptionsProps[\"items\"] = [\n    {\n      key: \"1\",\n      label: \"Name\",\n      children: nameEntry,\n    },\n    {\n      key: \"2\",\n      label: \"Symbol\",\n      children: token ? (\n        <Typography.Text>{parsedToken!.symbol.toUpperCase()}</Typography.Text>\n      ) : (\n        <Skeleton.Input />\n      ),\n    },\n    {\n      key: \"3\",\n      label: \"Decimals\",\n      children: token ? (\n        <Typography.Text>{parsedToken!.decimals}</Typography.Text>\n      ) : (\n        <Skeleton.Input />\n      ),\n    },\n  ];\n\n  return <Descriptions title=\"Token\" items={items} layout=\"vertical\" />;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"style_row__sMVKO\"};","import { useNavigate } from \"react-router\";\nimport { useCallback } from \"react\";\n\nimport { Token } from \"../../model\";\n\nimport styles from \"./style.module.scss\";\nimport { Col, Row, Typography } from \"antd\";\n\ntype TokenRowProps = {\n  token: Token;\n};\n\nexport default function TokenRow({ token }: TokenRowProps) {\n  const navigate = useNavigate();\n\n  const onLaunchClick = useCallback(() => {\n    navigate(`/tokens/${token.id}`);\n  }, [token.id, navigate]);\n\n  return (\n    <Row className={styles.row}>\n      <Col span={20}>\n        <Typography.Link onClick={onLaunchClick}>{token.name}</Typography.Link>\n      </Col>\n      <Col span={4}>\n        <Typography.Text>{token.decimals}</Typography.Text>\n      </Col>\n    </Row>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cell\":\"style_cell__sbImy\",\"cell-row-0\":\"style_cell-row-0__Cpen3\",\"first-cell\":\"style_first-cell__vAkBR\"};","import { Card, Col, Row, Skeleton, Typography } from \"antd\";\nimport { Token, isMappedToken, mapToken } from \"entities/token/model\";\nimport { useMemo } from \"react\";\nimport { Amount } from \"shared/ui\";\nimport { OnchainToken, normalizeField, useTokenBalances } from \"shared/web3\";\nimport cn from \"classnames\";\n\nimport styles from \"./style.module.scss\";\n\ntype TokenBalancesProps = {\n  token: OnchainToken | Token;\n};\n\nexport default function TokenBalances({ token }: TokenBalancesProps) {\n  const balances = useTokenBalances(normalizeField(token.id));\n  const parsedToken = useMemo(\n    () => (isMappedToken(token) ? token : mapToken(token)),\n    [token]\n  );\n\n  const isDataReady = balances.data && parsedToken;\n\n  return (\n    <Card size=\"small\" bodyStyle={{ padding: \"3px\" }}>\n      <Row>\n        <Col\n          span={12}\n          className={cn(\n            styles.cell,\n            styles[\"first-cell\"],\n            styles[\"cell-row-0\"]\n          )}\n        >\n          <Typography.Text>Public balance</Typography.Text>\n        </Col>\n        <Col span={12} className={cn(styles.cell, styles[\"cell-row-0\"])}>\n          <Typography.Text>Private balance</Typography.Text>\n        </Col>\n        <Col span={12} className={cn(styles.cell, styles[\"first-cell\"])}>\n          {isDataReady ? (\n            <Amount\n              amount={balances.data.publicBalance}\n              decimals={parsedToken.decimals}\n              symbol={parsedToken.symbol}\n            />\n          ) : (\n            <Skeleton.Input />\n          )}\n        </Col>\n        <Col span={12} className={cn(styles.cell)}>\n          {isDataReady ? (\n            <Amount\n              amount={balances.data.privateBalance}\n              decimals={parsedToken.decimals}\n              symbol={parsedToken.symbol}\n            />\n          ) : (\n            <Skeleton.Input />\n          )}\n        </Col>\n      </Row>\n    </Card>\n  );\n}\n","import { Token as DbToken, OnchainToken, fieldToText } from \"shared/web3\";\n\nexport type Token = DbToken;\n\nexport function mapToken(\n  token: OnchainToken | undefined | null\n): Token | undefined {\n  if (!token) {\n    return undefined;\n  }\n\n  return {\n    name: fieldToText(token.name),\n    symbol: fieldToText(token.symbol),\n    id: token.id.toFixed(),\n    decimals: token.decimals,\n  };\n}\n\nexport function isMappedToken(token: OnchainToken | Token): token is Token {\n  return (\n    typeof token.name === \"string\" &&\n    typeof token.symbol === \"string\" &&\n    typeof token.id === \"string\"\n  );\n}\n","import { Card, List } from \"antd\";\nimport { TokenRow } from \"entities/token\";\nimport { mapToken } from \"entities/token/model\";\nimport { useTokensList } from \"shared/web3\";\n\nconst TokensListPage = () => {\n  const tokens = useTokensList();\n  return (\n    <Card title=\"Tokens\">\n      <List\n        bordered\n        dataSource={tokens.data || []}\n        renderItem={(t) => (\n          <List.Item>\n            <TokenRow token={mapToken(t)!} />\n          </List.Item>\n        )}\n      />\n    </Card>\n  );\n};\n\nexport default TokensListPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"passed\":\"styles_passed__pVj6j\"};","import { Space, Typography } from \"antd\";\nimport cn from \"classnames\";\nimport moment from \"moment\";\n\nimport styles from \"./styles.module.scss\";\n\ninterface BlockTimingProps {\n  dontShowBlocksCount?: boolean;\n  currentBlockHeight: number;\n  targetBlockHeight: number;\n  meanBlockTimeInSeconds?: number;\n}\n\nfunction timingText(\n  blockGap: number,\n  meanBlockTimeInSeconds: number,\n  isPassed: boolean\n) {\n  const postfix = isPassed ? \" ago\" : \"\";\n  return (\n    moment\n      .duration(Math.abs(blockGap) * meanBlockTimeInSeconds, \"seconds\")\n      .humanize() + postfix\n  );\n}\n\nexport default function BlockTiming({\n  currentBlockHeight,\n  targetBlockHeight,\n  meanBlockTimeInSeconds,\n  dontShowBlocksCount,\n}: BlockTimingProps) {\n  const showTimingInSeconds = Boolean(meanBlockTimeInSeconds);\n\n  const blockGap = targetBlockHeight - currentBlockHeight;\n  const isPassed = blockGap <= 0;\n\n  const timing =\n    showTimingInSeconds && meanBlockTimeInSeconds && blockGap !== 0\n      ? \"~ \" + timingText(blockGap, meanBlockTimeInSeconds, isPassed)\n      : \"\";\n\n  const blockGapText = dontShowBlocksCount\n    ? \"\"\n    : `${Math.abs(blockGap)} Blocks `;\n  return (\n    <Space>\n      <Typography.Text className={cn({ [styles.passed]: isPassed })}>\n        {blockGapText}\n        {timing}\n      </Typography.Text>\n    </Space>\n  );\n}\n","import BigNumber from \"bignumber.js\";\n\nexport function applyBothDecimals(\n  ratio: BigNumber.Value,\n  decimalsRight: number,\n  decimalsLeft: number\n): BigNumber {\n  if (decimalsRight !== decimalsLeft) {\n    return BigNumber(ratio).dividedBy(\n      BigNumber(10).pow(Math.abs(decimalsRight - decimalsLeft))\n    );\n  }\n\n  return BigNumber(ratio);\n}\n\nexport function invertRatio(ratio: BigNumber.Value): [BigNumber, BigNumber] {\n  return [BigNumber(1).dividedBy(ratio), BigNumber(1)];\n}\n\nexport function toRatio(\n  numerator: BigNumber.Value,\n  denominator: BigNumber.Value\n): BigNumber {\n  return BigNumber(numerator).div(denominator);\n}\n","import BigNumber from \"bignumber.js\";\n\nconst milestones = [\n  { value: 1_000_000, symbol: \"M\" },\n  { value: 1000, symbol: \"K\" },\n];\n\nexport function formatNumber(\n  value: BigNumber.Value,\n  decimalPlaces?: number\n): string {\n  for (let index = 0; index < milestones.length; index++) {\n    const milestone = milestones[index];\n    if (BigNumber(value).isGreaterThanOrEqualTo(milestone.value)) {\n      if (!decimalPlaces && decimalPlaces !== 0) {\n        return (\n          BigNumber(value).div(milestone.value).toFixed() + milestone.symbol\n        );\n      } else {\n        return (\n          BigNumber(value).div(milestone.value).toFixed(decimalPlaces) +\n          milestone.symbol\n        );\n      }\n    }\n  }\n\n  if (!decimalPlaces && decimalPlaces !== 0) {\n    return BigNumber(value).toFixed();\n  } else {\n    return BigNumber(value).toFixed(decimalPlaces);\n  }\n}\n","import BigNumber from \"bignumber.js\";\nimport { useMemo } from \"react\";\nimport { applyBothDecimals, invertRatio, toRatio } from \"./math\";\nimport { Typography } from \"antd\";\nimport { formatNumber } from \"./format\";\n\ninterface RaioProps {\n  rightSymbol: string;\n  rightDecimals: number;\n  leftSymbol: string;\n  leftDecimals: number;\n  notInvertAmounts?: boolean;\n  creditsAmount?: BigNumber.Value;\n  creditsDecimalPlaces?: number;\n  ratioData:\n    | {\n        value: BigNumber.Value;\n      }\n    | {\n        numerator: BigNumber.Value;\n        denominator: BigNumber.Value;\n      };\n}\n\nconst LOWER_THRESHOLD = 0.0001;\n\nexport function Ratio({\n  ratioData,\n  leftSymbol,\n  leftDecimals,\n  rightSymbol,\n  rightDecimals,\n  notInvertAmounts,\n  creditsAmount = 1,\n  creditsDecimalPlaces = 0,\n}: RaioProps) {\n  const ratio = useMemo(() => {\n    if (\"value\" in ratioData) {\n      return applyBothDecimals(\n        BigNumber(1).dividedBy(ratioData.value),\n        rightDecimals,\n        leftDecimals\n      );\n    } else {\n      return applyBothDecimals(\n        toRatio(ratioData.numerator, ratioData.denominator),\n        rightDecimals,\n        leftDecimals\n      );\n    }\n  }, [ratioData, rightDecimals, leftDecimals]);\n\n  const [rightAmount, leftAmount] = useMemo(() => {\n    if (!notInvertAmounts && ratio.isLessThanOrEqualTo(LOWER_THRESHOLD)) {\n      return invertRatio(ratio);\n    } else {\n      return [BigNumber(1), BigNumber(ratio)];\n    }\n  }, [ratio, notInvertAmounts]);\n\n  return (\n    <Typography.Text>\n      {formatNumber(\n        rightAmount.multipliedBy(creditsAmount),\n        creditsDecimalPlaces\n      )}{\" \"}\n      {rightSymbol.toUpperCase()} ={\" \"}\n      {formatNumber(leftAmount.multipliedBy(creditsAmount))}{\" \"}\n      {leftSymbol.toUpperCase()}\n    </Typography.Text>\n  );\n}\n","import { Typography } from \"antd\";\nimport BigNumber from \"bignumber.js\";\nimport { U128, divideToDecimals } from \"shared/web3\";\nimport { formatNumber } from \"./format\";\nimport { useMemo } from \"react\";\n\ninterface AmountProps {\n  amount:\n    | BigNumber.Value\n    | {\n        amount: BigNumber.Value;\n        numerator: U128;\n        denominator: U128;\n      };\n  decimals: number;\n  symbol: string;\n}\n\nfunction calculateAmount(input: AmountProps[\"amount\"]): BigNumber {\n  if (typeof input === \"object\" && \"numerator\" in input) {\n    return BigNumber(input.amount)\n      .multipliedBy(input.numerator)\n      .dividedBy(input.denominator);\n  }\n  return BigNumber(input);\n}\n\nexport function Amount({ amount, decimals, symbol }: AmountProps) {\n  const calculatedAmount = useMemo(() => calculateAmount(amount), [amount]);\n  return (\n    <Typography.Text>\n      {formatNumber(divideToDecimals(calculatedAmount, decimals))} {symbol}\n    </Typography.Text>\n  );\n}\n"],"names":["TokenInfo","_ref","token","link","parsedToken","useMemo","isMappedToken","mapToken","items","key","label","children","_jsx","Link","to","concat","normalizeField","id","name","Typography","Text","Skeleton","Input","symbol","toUpperCase","decimals","Descriptions","title","layout","TokenRow","navigate","useNavigate","onLaunchClick","useCallback","_jsxs","Row","className","styles","row","Col","span","onClick","TokenBalances","balances","useTokenBalances","isDataReady","data","Card","size","bodyStyle","padding","cn","cell","Amount","amount","publicBalance","privateBalance","fieldToText","toFixed","tokens","useTokensList","List","bordered","dataSource","renderItem","t","Item","BlockTiming","currentBlockHeight","targetBlockHeight","meanBlockTimeInSeconds","dontShowBlocksCount","blockGap","isPassed","timing","Boolean","postfix","moment","Math","abs","humanize","timingText","blockGapText","Space","_defineProperty","passed","applyBothDecimals","ratio","decimalsRight","decimalsLeft","BigNumber","dividedBy","pow","milestones","value","formatNumber","decimalPlaces","index","length","milestone","isGreaterThanOrEqualTo","div","LOWER_THRESHOLD","Ratio","ratioData","leftSymbol","leftDecimals","rightSymbol","rightDecimals","notInvertAmounts","_ref$creditsAmount","creditsAmount","_ref$creditsDecimalPl","creditsDecimalPlaces","numerator","denominator","_useMemo","isLessThanOrEqualTo","invertRatio","_useMemo2","_slicedToArray","rightAmount","leftAmount","multipliedBy","calculatedAmount","input","divideToDecimals"],"sourceRoot":""}